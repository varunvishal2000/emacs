* Minor Packages
#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :init
  (which-key-mode))
(use-package beacon
  :ensure t
  :init
  (beacon-mode 1))
#+end_src

** clock
#+begin_src emacs-lisp
(setq display-time-format-24hr-format t)
(display-time-mode 1)
#+end_src
* EXWM
#+begin_src emacs-lisp

#+end_src
* Terminal
** Ansi-term
#+begin_src emacs-lisp
(defvar my-term-shell "/bin/bash")
(defadvice ansi-term (before force-bash)
  (interactive (list my-term-shell)))
(ad-activate 'ansi-term)
(define-key global-map (kbd "<s-return>") 'ansi-term)
#+end_src
* minor-features
#+begin_src emacs-lisp
(setq make-backup-file nil)
(setq auto-save-default nil)
(setq scroll-conservatively 100)
(when window-system (global-hl-line-mode t))
(when window-system (global-prettify-symbols-mode t))
(electric-pair-mode 1)
(setq electric-pair-preserve-balance nil)
(setq inhibit-startup-screen t)
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
(global-set-key (kbd "C-x b") 'ibuffer)
(global-subword-mode 1)
#+end_src
* minor-functions
** kill-whole-word
#+begin_src emacs-lisp
  (defun kill-whole-word ()
    (interactive)
    (backward-word)
    (kill-word 1))
  (global-set-key (kbd "C-c w w") 'kill-whole-word)
#+end_src
* hungry delete
#+begin_src emacs-lisp
  (use-package hungry-delete
    :ensure t
    :config
    (global-hungry-delete-mode))
#+end_src
* buffers
** kill current buffer
#+begin_src emacs-lisp
  (defun kill-current-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k") 'kill-current-buffer)
#+end_src
** kill-all-buffer
#+begin_src emacs-lisp
  (defun kill-all-buffers ()
    (interactive)
    (mapc 'kill-buffer (buffer-list)))
  (global-set-key (kbd "C-M-s-k") 'kill-all-buffers)  
#+end_src
* Yasnippet
#+begin_src emacs-lisp
(add-to-list 'load-path
              "~/.emacs.d/plugins/yasnippet")
(require 'yasnippet)
(yas-global-mode 1)
(yas-reload-all 1)
(setq yas-snippet-dirs '("~/.emacs.d/plugins/yasnippet/snippets"))
(define-key global-map (kbd "C-M-y") 'yas-reload-all)
#+end_src
* sudo edit
#+begin_src emacs-lisp
  (use-package sudo-edit
    :ensure t
    :bind ("s-e" . sudo-edit))
#+end_src
* emmet-mode
#+begin_src emacs-lisp
(add-hook 'html-mode-hook 'emmet-mode)
(add-hook 'css-mode-hook  'emmet-mode)
#+end_src

* Company mode
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :init
    (add-hook 'after-init-hook 'global-company-mode))
#+end_src

* Org
** bullets
#+begin_src emacs-lisp
(use-package org-bullets
:ensure t
:config
(add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+end_src
** basic
#+begin_src emacs-lisp
  (setq org-src-window-setup 'current-window)
#+end_src
* ido
** enabling
#+begin_src emacs-lisp
  (setq ido-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
#+end_src
** vertical mode
#+begin_src emacs-lisp
(use-package ido-vertical-mode
:ensure t
:init
(ido-vertical-mode 1))
(setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+end_src

** smex
#+begin_src emacs-lisp
  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind
    ("M-x" . smex))
#+end_src
** switch-buffer
#+begin_src emacs-lisp
(global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
#+end_src
** expert
#+begin_src emacs-lisp
(setq ibuffer-expert t)
#+end_src
* window-splitting function
#+begin_src emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
    (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

    (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 2))
    (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+end_src
* switch-window
#+begin_src emacs-lisp
(use-package switch-window
:ensure t
:config
(setq switch-window-input-style 'minibuffer)
(setq switch-window-increase 4)
(setq switch-window-threshold 2)
(setq switch-window-shortcut-style 'qwerty)
(setq switch-window-qwerty-shortcuts '("a" "s" "d"))
:bind
([remap other-window] . switch-window))
#+end_src
* config file
** open config file
#+begin_src emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-x e") 'config-visit)
#+end_src
** reload config file
#+begin_src emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+end_src
* avy
#+begin_src emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+end_src
* rainbow
** rainbow-mode
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init
    (rainbow-mode 1))
#+end_src
** rainbow-delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
    (rainbow-delimiters-mode 1))
#+end_src
* convinient functions
** copy-whole-line
#+begin_src emacs-lisp
  (defun copy-whole-line ()
    (interactive)
    (save-excursion
      (kill-new
       (buffer-substring
	(point-at-bol)
	(point-at-eol)))))
  (global-set-key (kbd "C-c w l") 'copy-whole-line)
    
#+end_src
** kill-whole-word
#+begin_src emacs-lisp

#+end_src 
* dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents . 10)))
    (setq dashboard-banner-logo-title "Remember the dream")
    (setq dasboard-center-content t))
#+end_src
* mode-line
** spaceline
#+begin_src emacs-lisp
  (use-package spaceline
    :ensure t
    :config
    (require 'spaceline-config)
    (setq powerline-default-separator (quote arrow))
    (spaceline-spacemacs-theme))
#+end_src
** diminish
#+begin_src emacs-lisp
  (use-package diminish
    :ensure t
    :init
    (diminish 'beacon-mode)
    (diminish 'which-key-mode))
    (diminish 'rainbow-mode)
    (diminish 'subword-mode)
    (diminish 'hungry-delete-mode)
#+end_src
* dmenu
#+begin_src emacs-lisp
  (use-package dmenu
    :ensure t
    :bind
    ("C-?" . 'dmenu))
#+end_src
* symon
#+begin_src emacs-lisp
(use-package symon
:ensure t
:bind
("C-:" . symon-mode))
#+end_src
